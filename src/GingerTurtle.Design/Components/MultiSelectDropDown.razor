@using GingerTurtle.Design.Constants
@using GingerTurtle.Design.Contracts
@using GingerTurtle.Design.Models
@using GingerTurtle.Design.Services

<div class="dropdown-wrapper">

    <Display If="@(!IsExpanded)">
        <label for="@($"{Id}_Input")" aria-label="@($"{Id}_Input")"></label>
        <input type="text"
               placeholder="@Placeholder"
               id="@($"{Id}_Input")"
               class="@(Class) pseudo-dropdown @(CanEdit ? "" : "disabled")"
               @onfocus="@(OpenDropDown)"
               @onblur="@(() => RefocusOnInput($"{Id}_ExpandedInput"))"
               disabled="@(!CanEdit || !DisplayOptions.Any())"
               autocomplete="one-time-code"/>
    </Display>
    
    <Display If="IsExpanded">
        <label for="@($"{FilterInputId}")" aria-label="@($"{FilterInputId}")" class="hide-me">@($"{FilterInputId}")</label>
        <DebounceTextInput Value="@DisplayValue"
                           DebounceMilliseconds="200"
                           Class="@GetCssClass(IsExpanded)"
                           InputChangedHandler="FilterTextUpdated"
                           ElapsedHandler="async() => await FilterOptions()"
                           Placeholder="@Placeholder"
                           Type="TextInputType.Text"
                           BlurredCallback="@ResetDropdown"
                           KeyPressedCallback="@KeyPressed"
                           Id="@FilterInputId"/>
        <div id="@Id"
             class="dropdown-options-wrapper @(Class) @(RenderInline ? "inline" : "")"
             tabindex="0">
            <ol>
                <Display If="(!DisplayOptions.Any())">
                    <li class="make-clickable display-message"
                        @onmousedown="@(ResetDropdown)"
                        @onclick:preventDefault="true"
                        data-cy="@($"{Id}_Message")">
                        @DisplayMessage
                    </li>
                </Display>

                <Display If="@(DisplayOptions.Any())">
                    <Display If="@(CanClear)">
                        <li class="make-clickable"
                            @onmousedown="@(ClearSelection)"
                            @onclick:preventDefault="true"
                            data-cy="@($"{Id}_Clear")">
                            @Placeholder
                        </li>
                    </Display>

                    @foreach (var option in DisplayOptions)
                    {
                    <li class="make-clickable @(SelectedOptions.Split('|').Any(i => i == option.Id) ? "selected" : "") @(ActiveOption?.Description == option.Description ? "active" :"")"
                        id="@GenerateOptionId(option)"
                        @onmousedown="@(() => SelectionChanged(option))"
                        @onclick:preventDefault="true"
                        data-cy="@GenerateOptionId(option)">
                        @option.Description
                    </li>
                    }
                </Display>
            </ol>
        </div>
    </Display>

    <Display If="@(!string.IsNullOrEmpty(SelectedOptions))">

        <ul class="selected-options">
            @foreach (var option in SelectedOptions.Split('|'))
            {
                <li @key="@option">
                    <button class="btn btn-selected" @onclick="@(async() => await SelectionChanged(Options.FirstOrDefault(o => o.Id == option)))">
                        @Options.FirstOrDefault(o => o.Id == option)?.Description
                    </button>
                </li>
            }
        </ul>
    </Display>
    
</div>

@code {

    [Inject]
    public INavigationService NavigationService { get; set; }

    [Inject]
    public IInputService InputService { get; set; }

    [Parameter]
    public string Id { get; set; } = Guid.NewGuid().ToString();

    [Parameter]
    public List<QuestionOption> Options { get; set; } = new();

    [Parameter]
    public EventCallback<QuestionOption> SelectionChangedHandler { get; set; }

    [Parameter]
    public string Placeholder { get; set; }

    [Parameter]
    public bool CanEdit { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public bool CanClear { get; set; }

    [Parameter]
    public bool IsRequired { get; set; }

    [Parameter, EditorRequired]
    public string SelectedOptions { get; set; }

    protected List<QuestionOption> DisplayOptions { get; set; }

    protected QuestionOption ActiveOption { get; set; }

    protected bool IsExpanded { get; set; }

    private void CloseDropDown() => IsExpanded = false;

    private string GenerateOptionId(QuestionOption option) => $"{Id}_{option.Id}";

    private async Task KeyPressed(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case KeyInputConstants.ArrowDownKey:
                ActiveOption = DisplayOptions.GetNext(ActiveOption);
                await NavigationService.ScrollOptionIntoView(GenerateOptionId(ActiveOption), Id);
                break;
            case KeyInputConstants.ArrowUpKey:
                ActiveOption = DisplayOptions.GetPrevious(ActiveOption);
                await NavigationService.ScrollOptionIntoView(GenerateOptionId(ActiveOption), Id);
                break;
            case KeyInputConstants.EscapeKey:
                CloseDropDown();
                break;
            case KeyInputConstants.EnterKey:
                await SelectionChanged(ActiveOption);
                break;
        }
    }

    [Parameter]
    public bool RenderInline { get; set; }

    private string DisplayValue { get; set; }

    private string DisplayMessage { get; set; } = "No options available";

    private string ClearButtonId => $"{Id}_Clear";

    protected override void OnInitialized()
    {
    DisplayOptions = Options;
    ResetDisplayValue();
    CanEdit = CanEdit && DisplayOptions.Any();
    }

    protected override void OnParametersSet()
    {
    DisplayOptions = Options;
    ResetDisplayValue();
    }

    private Task OpenDropDown()
    {
    if (!CanEdit || !DisplayOptions.Any())
    return Task.CompletedTask;
    IsExpanded = !IsExpanded;
    return Task.CompletedTask;
    }


    private Task OpenAndClearDropDown()
    {
    if (!CanEdit || !DisplayOptions.Any())
    return Task.CompletedTask;
    DisplayOptions = Options;
    IsExpanded = !IsExpanded;
    return Task.CompletedTask;
    }


    private async Task ScrollToAndFocusOnOption(int optionIndex)
    {
        await InputService.ScrollToCurrentSelected(GenerateOptionId(DisplayOptions.FirstOrDefault()), Id, optionIndex);
        await InputService.FocusInput(FilterInputId);
        await InputService.ScrollIntoModalView(Id);
    }

    private async Task RefocusOnInput(string elementId)
    {
        if (IsExpanded)
            await InputService.FocusInput(elementId);
    }

    private async Task SelectionChanged(QuestionOption option)
    {
        await SelectionChangedHandler.InvokeAsync(option);
        ResetDisplayValue();
        CloseDropDown();
    }

    private async Task ResetDropdown()
    {
        CloseDropDown();

        ResetDisplayValue();

        DisplayOptions = Options;

        await SelectionChangedHandler.InvokeAsync(DisplayOptions.Find(o => o.Id == SelectedOptions));
    }

    private async Task ClearSelection()
    {
    if (CanClear)
    SelectedOptions = null;
    await ResetDropdown();
    }

    private Task FilterOptions()
    {
    DisplayOptions = Options;

    if (!string.IsNullOrEmpty(DisplayValue))
    DisplayOptions = DisplayOptions.FindAll(o => o.Description.ToLower().Contains(DisplayValue.ToLower()));

    StateHasChanged();

    return Task.CompletedTask;
    }

    private void ResetDisplayValue()
    {
    DisplayValue = Options.FirstOrDefault(i => i.Id == SelectedOptions)?.Description ?? string.Empty;
    }

    private void FilterTextUpdated(object value)
    {
    DisplayValue = value?.ToString() ?? "";
    }

    private string FilterInputId => $"{Id}_ExpandedInput";

    private string GetCssClass(bool isExpanded)
    {
        var style = $"{Class} pseudo-dropdown";
        if (isExpanded)
        style = $"{style} active-dropdown";
        return style;
    }
}