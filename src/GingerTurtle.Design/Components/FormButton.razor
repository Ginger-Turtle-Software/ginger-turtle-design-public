@using GingerTurtle.Design.Extensions
@using GingerTurtle.Design.Types

<Hover HoverText="@HoverText">

    <button id="@Id"
            type="button"
            class="@($"{Type.GetButtonTypeCssClass()} {Size.GetCssClass()}") @(Type.HasIconBorder() ? "bordered" : "") @(IsDark ? "dark" : "") @(IsProcessing ? "processing" : "")"
            disabled="@(!IsProcessing && Disabled)"
            @onclick="@Clicked"
            data-cy="@Id"
            aria-label="@(string.IsNullOrEmpty(Title) ? string.IsNullOrEmpty(HoverText) ? Id : HoverText : Title)"
            @onclick:preventDefault="true"
            @onabort:stopPropagation="true">
        <Display If="@(!(string.IsNullOrEmpty(IconUrl))  && IconPosition == IconPosition.Left)">        
        <span class="btn-icon-wrapper">
                <Icon IconUrl="@IconUrl" Size="@IconSize" Color="IconColor"/>
        </span>
        </Display>
        <Display If="@Type.HasText()">
            @Text
        </Display>
        
        <span class="spinner"></span>
        
        <Display If="@(!(string.IsNullOrEmpty(IconUrl)) && IconPosition == IconPosition.Right)">
        <span class="btn-icon-wrapper">
            <Icon IconUrl="@IconUrl" Size="@IconSize" Color="IconColor" />
        </span>
        </Display>
    </button>
</Hover>


@code {

    [Parameter, EditorRequired]
    public string Id { get; set; }

    [Parameter]
    public string Text { get; set; }
    
    [Parameter]
    public string Title { get; set; }
    
    [Parameter]
    public string HoverText { get; set; }

    [Parameter]
    public bool IsDark { get; set; }
        
    [Parameter]
    public ButtonType Type { get; set; } = ButtonType.Primary;

    [Parameter]
    public ElementSize Size { get; set; } = ElementSize.Medium;

    [Parameter]
    public string IconUrl { get; set; }

    [Parameter]
    public IconPosition IconPosition { get; set; } = IconPosition.Left;

    [Parameter]
    public ElementSize IconSize { get; set; } = ElementSize.Medium;

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool IsProcessing { get; set; }
    
    [Parameter]
    public ElementColor IconColor { get; set; }

    [Parameter]
    public EventCallback ClickedCallback { get; set; }

    private async Task Clicked()
    {
        if (Disabled || IsProcessing)
            return;
        await ClickedCallback.InvokeAsync();   
    }
}